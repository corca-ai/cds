{"version":3,"file":"CustomTimeInput.mjs","sources":["../../../../../src/legacy/components/DatePicker/DateTime/CustomTimeInput.tsx"],"sourcesContent":["import { useEffect, useState } from 'react';\n\nimport styled from '@emotion/styled';\n\nimport { Button } from '../../Button';\nimport { B3 } from '../../Text';\nimport { color, typography } from '../../styles';\nimport { AMPM_FORMAT } from '../constant';\nimport { DatePickerLocale } from 'src/legacy/utils';\n\nexport interface Time {\n  hh: string;\n  mm: string;\n  ss: string;\n  amPm: AMPM;\n}\n\nexport enum AMPM {\n  AM = 'AM',\n  PM = 'PM',\n}\n\nexport interface CustomTimeInputProps {\n  newDate: Date;\n  language: DatePickerLocale;\n  onConfirm: () => void;\n  setNewDate: (date: Date) => void;\n}\n\nexport const CustomTimeInput = ({\n  newDate,\n  language,\n  onConfirm,\n  setNewDate,\n}: CustomTimeInputProps) => {\n  const getFormattedHour = (hour: number): string => {\n    return (hour > 12 ? hour - 12 : hour).toString().padStart(2, '0');\n  };\n\n  const [inputValue, setInputValue] = useState<Time>({\n    hh: getFormattedHour(newDate.getHours()),\n    mm: newDate.getMinutes().toString().padStart(2, '0'),\n    ss: newDate.getSeconds().toString().padStart(2, '0'),\n    amPm: newDate.getHours() < 12 ? AMPM.AM : AMPM.PM,\n  });\n\n  const onChangeDate = (time: Time) => {\n    const dateData = new Date(newDate);\n    dateData.setHours(\n      Number(time.hh) + (Number(time.hh) >= 12 || time.amPm === AMPM.AM ? 0 : 12),\n      Number(time.mm) || 0,\n      Number(time.ss) || 0,\n    );\n    setNewDate(dateData);\n  };\n\n  useEffect(() => {\n    if (!inputValue.hh) {\n      return;\n    }\n    onChangeDate(inputValue);\n\n    const formatHourTimer = setTimeout(() => {\n      const NUMERIC_HOUR = Number(inputValue.hh);\n      const timeData = {\n        hh: inputValue.hh,\n      };\n\n      // format hour to 12 hour format only when hour is greater than 12\n      if (NUMERIC_HOUR > 12) {\n        Object.assign(timeData, {\n          hh: getFormattedHour(NUMERIC_HOUR),\n          amPm: AMPM.PM,\n        });\n      }\n\n      setInputValue(prev => ({ ...prev, ...timeData }));\n    }, 500);\n\n    return () => clearTimeout(formatHourTimer);\n  }, [inputValue.hh]);\n\n  return (\n    <DefaultContainer>\n      <TimeContainer>\n        <AmPmButton\n          onClick={() => {\n            const time = {\n              ...inputValue,\n              amPm: inputValue.amPm === AMPM.AM ? AMPM.PM : AMPM.AM,\n            };\n            setInputValue(time);\n            onChangeDate(time);\n          }}\n        >\n          <B3>{AMPM_FORMAT[language][inputValue.amPm]}</B3>\n        </AmPmButton>\n        <TimeInputWrapper>\n          <TimeInput\n            type={'number'}\n            max={23}\n            min={0}\n            onChange={e => {\n              if (Number(e.target['value']) > 23) {\n                return;\n              }\n              const time = { ...inputValue, hh: e.target['value'] };\n              setInputValue(time);\n              onChangeDate(time);\n            }}\n            value={inputValue.hh}\n          />\n          {' : '}\n          <TimeInput\n            type={'number'}\n            max={59}\n            min={0}\n            onChange={e => {\n              if (Number(e.target['value']) > 59 || Number(e.target['value']) < 0) {\n                return;\n              }\n              const time = { ...inputValue, mm: e.target['value'] };\n              setInputValue(time);\n              onChangeDate(time);\n            }}\n            value={inputValue.mm}\n          />\n          {' : '}\n          <TimeInput\n            type={'number'}\n            max={59}\n            min={0}\n            onChange={e => {\n              if (Number(e.target['value']) > 59 || Number(e.target['value']) < 0) {\n                return;\n              }\n              const time = { ...inputValue, ss: e.target['value'] };\n              setInputValue(time);\n              onChangeDate(time);\n            }}\n            value={inputValue.ss}\n          />\n        </TimeInputWrapper>\n      </TimeContainer>\n      <Button\n        disabled={!inputValue.hh || !inputValue.mm || !inputValue.ss}\n        onClick={() => onConfirm()}\n        variant=\"filled\"\n        color={color['main-black']}\n        size={'small'}\n      >\n        {language === 'ko' ? '확인' : 'Confirm'}\n      </Button>\n    </DefaultContainer>\n  );\n};\n\n// Lower Part in Container: time input and confirm button - confirm button is located here because of style customizing\nexport const DefaultContainer = styled.div`\n  width: 242px;\n  height: 104px;\n  display: flex;\n  flex-direction: column;\n  gap: 18px;\n  justify-content: space-around;\n  border-top: 1px solid ${color['grey-30']};\n`;\n\nexport const TimeContainer = styled.div`\n  line-height: 15.51px;\n  height: 34px;\n  padding: 6px;\n  border: 1px solid ${color['grey-50']};\n  border-radius: 8px;\n  font-weight: 400;\n  font-size: ${typography.size.xs}px;\n  color: ${color['main-black']};\n  background-color: ${color['white']};\n  display: flex;\n  align-items: center;\n  margin-top: 18px;\n`;\n\nconst TimeInputWrapper = styled.div`\n  width: 60px;\n  height: 16px;\n  display: flex;\n  align-items: center;\n  justify-content: flex-start;\n`;\n\nexport const TimeInput = styled.input`\n  width: 20px;\n  height: 16px;\n  padding: 0 2px 0 2px;\n  border: none;\n  ::-webkit-inner-spin-button {\n    -webkit-appearance: none;\n    margin: 0;\n  }\n`;\n\nexport const AmPmButton = styled.button`\n  width: 37px;\n  height: 22px;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n  background-color: ${color['white']};\n  margin-right: 10px;\n  &:hover {\n    background-color: ${color['grey-20']};\n  }\n`;\n"],"names":["AMPM","CustomTimeInput","newDate","language","onConfirm","setNewDate","getFormattedHour","hour","inputValue","setInputValue","useState","onChangeDate","time","dateData","useEffect","formatHourTimer","NUMERIC_HOUR","timeData","prev","DefaultContainer","jsxs","TimeContainer","jsx","AmPmButton","B3","AMPM_FORMAT","TimeInputWrapper","TimeInput","e","Button","color","styled","typography"],"mappings":"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"}