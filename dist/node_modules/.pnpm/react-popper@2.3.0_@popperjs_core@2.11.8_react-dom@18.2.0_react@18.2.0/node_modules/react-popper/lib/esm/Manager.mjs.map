{"version":3,"file":"Manager.mjs","sources":["../../../../../../../../node_modules/.pnpm/react-popper@2.3.0_@popperjs+core@2.11.8_react-dom@18.2.0_react@18.2.0/node_modules/react-popper/lib/esm/Manager.js"],"sourcesContent":["import * as React from 'react';\nexport var ManagerReferenceNodeContext = React.createContext();\nexport var ManagerReferenceNodeSetterContext = React.createContext();\nexport function Manager(_ref) {\n  var children = _ref.children;\n\n  var _React$useState = React.useState(null),\n      referenceNode = _React$useState[0],\n      setReferenceNode = _React$useState[1];\n\n  var hasUnmounted = React.useRef(false);\n  React.useEffect(function () {\n    return function () {\n      hasUnmounted.current = true;\n    };\n  }, []);\n  var handleSetReferenceNode = React.useCallback(function (node) {\n    if (!hasUnmounted.current) {\n      setReferenceNode(node);\n    }\n  }, []);\n  return /*#__PURE__*/React.createElement(ManagerReferenceNodeContext.Provider, {\n    value: referenceNode\n  }, /*#__PURE__*/React.createElement(ManagerReferenceNodeSetterContext.Provider, {\n    value: handleSetReferenceNode\n  }, children));\n}"],"names":["ManagerReferenceNodeContext","React","ManagerReferenceNodeSetterContext","Manager","_ref","children","_React$useState","referenceNode","setReferenceNode","hasUnmounted","handleSetReferenceNode","node"],"mappings":";AACU,IAACA,IAA8BC,EAAM,cAAgB,GACpDC,IAAoCD,EAAM,cAAgB;AAC9D,SAASE,EAAQC,GAAM;AAC5B,MAAIC,IAAWD,EAAK,UAEhBE,IAAkBL,EAAM,SAAS,IAAI,GACrCM,IAAgBD,EAAgB,CAAC,GACjCE,IAAmBF,EAAgB,CAAC,GAEpCG,IAAeR,EAAM,OAAO,EAAK;AACrCA,IAAM,UAAU,WAAY;AAC1B,WAAO,WAAY;AACjB,MAAAQ,EAAa,UAAU;AAAA,IAC7B;AAAA,EACG,GAAE,CAAE,CAAA;AACL,MAAIC,IAAyBT,EAAM,YAAY,SAAUU,GAAM;AAC7D,IAAKF,EAAa,WAChBD,EAAiBG,CAAI;AAAA,EAExB,GAAE,CAAE,CAAA;AACL,SAAoBV,kBAAM,cAAcD,EAA4B,UAAU;AAAA,IAC5E,OAAOO;AAAA,EACR,GAAeN,kBAAM,cAAcC,EAAkC,UAAU;AAAA,IAC9E,OAAOQ;AAAA,EACX,GAAKL,CAAQ,CAAC;AACd;","x_google_ignoreList":[0]}