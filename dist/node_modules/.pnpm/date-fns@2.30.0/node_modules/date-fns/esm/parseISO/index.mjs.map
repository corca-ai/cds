{"version":3,"file":"index.mjs","sources":["../../../../../../../../node_modules/.pnpm/date-fns@2.30.0/node_modules/date-fns/esm/parseISO/index.js"],"sourcesContent":["import { millisecondsInHour, millisecondsInMinute } from \"../constants/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport toInteger from \"../_lib/toInteger/index.js\";\n/**\n * @name parseISO\n * @category Common Helpers\n * @summary Parse ISO string\n *\n * @description\n * Parse the given string in ISO 8601 format and return an instance of Date.\n *\n * Function accepts complete ISO 8601 formats as well as partial implementations.\n * ISO 8601: http://en.wikipedia.org/wiki/ISO_8601\n *\n * If the argument isn't a string, the function cannot parse the string or\n * the values are invalid, it returns Invalid Date.\n *\n * @param {String} argument - the value to convert\n * @param {Object} [options] - an object with options.\n * @param {0|1|2} [options.additionalDigits=2] - the additional number of digits in the extended year format\n * @returns {Date} the parsed date in the local time zone\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2\n *\n * @example\n * // Convert string '2014-02-11T11:30:30' to date:\n * const result = parseISO('2014-02-11T11:30:30')\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert string '+02014101' to date,\n * // if the additional number of digits in the extended year format is 1:\n * const result = parseISO('+02014101', { additionalDigits: 1 })\n * //=> Fri Apr 11 2014 00:00:00\n */\nexport default function parseISO(argument, options) {\n  var _options$additionalDi;\n  requiredArgs(1, arguments);\n  var additionalDigits = toInteger((_options$additionalDi = options === null || options === void 0 ? void 0 : options.additionalDigits) !== null && _options$additionalDi !== void 0 ? _options$additionalDi : 2);\n  if (additionalDigits !== 2 && additionalDigits !== 1 && additionalDigits !== 0) {\n    throw new RangeError('additionalDigits must be 0, 1 or 2');\n  }\n  if (!(typeof argument === 'string' || Object.prototype.toString.call(argument) === '[object String]')) {\n    return new Date(NaN);\n  }\n  var dateStrings = splitDateString(argument);\n  var date;\n  if (dateStrings.date) {\n    var parseYearResult = parseYear(dateStrings.date, additionalDigits);\n    date = parseDate(parseYearResult.restDateString, parseYearResult.year);\n  }\n  if (!date || isNaN(date.getTime())) {\n    return new Date(NaN);\n  }\n  var timestamp = date.getTime();\n  var time = 0;\n  var offset;\n  if (dateStrings.time) {\n    time = parseTime(dateStrings.time);\n    if (isNaN(time)) {\n      return new Date(NaN);\n    }\n  }\n  if (dateStrings.timezone) {\n    offset = parseTimezone(dateStrings.timezone);\n    if (isNaN(offset)) {\n      return new Date(NaN);\n    }\n  } else {\n    var dirtyDate = new Date(timestamp + time);\n    // js parsed string assuming it's in UTC timezone\n    // but we need it to be parsed in our timezone\n    // so we use utc values to build date in our timezone.\n    // Year values from 0 to 99 map to the years 1900 to 1999\n    // so set year explicitly with setFullYear.\n    var result = new Date(0);\n    result.setFullYear(dirtyDate.getUTCFullYear(), dirtyDate.getUTCMonth(), dirtyDate.getUTCDate());\n    result.setHours(dirtyDate.getUTCHours(), dirtyDate.getUTCMinutes(), dirtyDate.getUTCSeconds(), dirtyDate.getUTCMilliseconds());\n    return result;\n  }\n  return new Date(timestamp + time + offset);\n}\nvar patterns = {\n  dateTimeDelimiter: /[T ]/,\n  timeZoneDelimiter: /[Z ]/i,\n  timezone: /([Z+-].*)$/\n};\nvar dateRegex = /^-?(?:(\\d{3})|(\\d{2})(?:-?(\\d{2}))?|W(\\d{2})(?:-?(\\d{1}))?|)$/;\nvar timeRegex = /^(\\d{2}(?:[.,]\\d*)?)(?::?(\\d{2}(?:[.,]\\d*)?))?(?::?(\\d{2}(?:[.,]\\d*)?))?$/;\nvar timezoneRegex = /^([+-])(\\d{2})(?::?(\\d{2}))?$/;\nfunction splitDateString(dateString) {\n  var dateStrings = {};\n  var array = dateString.split(patterns.dateTimeDelimiter);\n  var timeString;\n\n  // The regex match should only return at maximum two array elements.\n  // [date], [time], or [date, time].\n  if (array.length > 2) {\n    return dateStrings;\n  }\n  if (/:/.test(array[0])) {\n    timeString = array[0];\n  } else {\n    dateStrings.date = array[0];\n    timeString = array[1];\n    if (patterns.timeZoneDelimiter.test(dateStrings.date)) {\n      dateStrings.date = dateString.split(patterns.timeZoneDelimiter)[0];\n      timeString = dateString.substr(dateStrings.date.length, dateString.length);\n    }\n  }\n  if (timeString) {\n    var token = patterns.timezone.exec(timeString);\n    if (token) {\n      dateStrings.time = timeString.replace(token[1], '');\n      dateStrings.timezone = token[1];\n    } else {\n      dateStrings.time = timeString;\n    }\n  }\n  return dateStrings;\n}\nfunction parseYear(dateString, additionalDigits) {\n  var regex = new RegExp('^(?:(\\\\d{4}|[+-]\\\\d{' + (4 + additionalDigits) + '})|(\\\\d{2}|[+-]\\\\d{' + (2 + additionalDigits) + '})$)');\n  var captures = dateString.match(regex);\n  // Invalid ISO-formatted year\n  if (!captures) return {\n    year: NaN,\n    restDateString: ''\n  };\n  var year = captures[1] ? parseInt(captures[1]) : null;\n  var century = captures[2] ? parseInt(captures[2]) : null;\n\n  // either year or century is null, not both\n  return {\n    year: century === null ? year : century * 100,\n    restDateString: dateString.slice((captures[1] || captures[2]).length)\n  };\n}\nfunction parseDate(dateString, year) {\n  // Invalid ISO-formatted year\n  if (year === null) return new Date(NaN);\n  var captures = dateString.match(dateRegex);\n  // Invalid ISO-formatted string\n  if (!captures) return new Date(NaN);\n  var isWeekDate = !!captures[4];\n  var dayOfYear = parseDateUnit(captures[1]);\n  var month = parseDateUnit(captures[2]) - 1;\n  var day = parseDateUnit(captures[3]);\n  var week = parseDateUnit(captures[4]);\n  var dayOfWeek = parseDateUnit(captures[5]) - 1;\n  if (isWeekDate) {\n    if (!validateWeekDate(year, week, dayOfWeek)) {\n      return new Date(NaN);\n    }\n    return dayOfISOWeekYear(year, week, dayOfWeek);\n  } else {\n    var date = new Date(0);\n    if (!validateDate(year, month, day) || !validateDayOfYearDate(year, dayOfYear)) {\n      return new Date(NaN);\n    }\n    date.setUTCFullYear(year, month, Math.max(dayOfYear, day));\n    return date;\n  }\n}\nfunction parseDateUnit(value) {\n  return value ? parseInt(value) : 1;\n}\nfunction parseTime(timeString) {\n  var captures = timeString.match(timeRegex);\n  if (!captures) return NaN; // Invalid ISO-formatted time\n\n  var hours = parseTimeUnit(captures[1]);\n  var minutes = parseTimeUnit(captures[2]);\n  var seconds = parseTimeUnit(captures[3]);\n  if (!validateTime(hours, minutes, seconds)) {\n    return NaN;\n  }\n  return hours * millisecondsInHour + minutes * millisecondsInMinute + seconds * 1000;\n}\nfunction parseTimeUnit(value) {\n  return value && parseFloat(value.replace(',', '.')) || 0;\n}\nfunction parseTimezone(timezoneString) {\n  if (timezoneString === 'Z') return 0;\n  var captures = timezoneString.match(timezoneRegex);\n  if (!captures) return 0;\n  var sign = captures[1] === '+' ? -1 : 1;\n  var hours = parseInt(captures[2]);\n  var minutes = captures[3] && parseInt(captures[3]) || 0;\n  if (!validateTimezone(hours, minutes)) {\n    return NaN;\n  }\n  return sign * (hours * millisecondsInHour + minutes * millisecondsInMinute);\n}\nfunction dayOfISOWeekYear(isoWeekYear, week, day) {\n  var date = new Date(0);\n  date.setUTCFullYear(isoWeekYear, 0, 4);\n  var fourthOfJanuaryDay = date.getUTCDay() || 7;\n  var diff = (week - 1) * 7 + day + 1 - fourthOfJanuaryDay;\n  date.setUTCDate(date.getUTCDate() + diff);\n  return date;\n}\n\n// Validation functions\n\n// February is null to handle the leap year (using ||)\nvar daysInMonths = [31, null, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\nfunction isLeapYearIndex(year) {\n  return year % 400 === 0 || year % 4 === 0 && year % 100 !== 0;\n}\nfunction validateDate(year, month, date) {\n  return month >= 0 && month <= 11 && date >= 1 && date <= (daysInMonths[month] || (isLeapYearIndex(year) ? 29 : 28));\n}\nfunction validateDayOfYearDate(year, dayOfYear) {\n  return dayOfYear >= 1 && dayOfYear <= (isLeapYearIndex(year) ? 366 : 365);\n}\nfunction validateWeekDate(_year, week, day) {\n  return week >= 1 && week <= 53 && day >= 0 && day <= 6;\n}\nfunction validateTime(hours, minutes, seconds) {\n  if (hours === 24) {\n    return minutes === 0 && seconds === 0;\n  }\n  return seconds >= 0 && seconds < 60 && minutes >= 0 && minutes < 60 && hours >= 0 && hours < 25;\n}\nfunction validateTimezone(_hours, minutes) {\n  return minutes >= 0 && minutes <= 59;\n}"],"names":["parseISO","argument","options","_options$additionalDi","requiredArgs","additionalDigits","toInteger","dateStrings","splitDateString","date","parseYearResult","parseYear","parseDate","timestamp","time","offset","parseTime","parseTimezone","dirtyDate","result","patterns","dateRegex","timeRegex","timezoneRegex","dateString","array","timeString","token","regex","captures","year","century","isWeekDate","dayOfYear","parseDateUnit","month","day","week","dayOfWeek","validateWeekDate","dayOfISOWeekYear","validateDate","validateDayOfYearDate","value","hours","parseTimeUnit","minutes","seconds","validateTime","millisecondsInHour","millisecondsInMinute","timezoneString","sign","validateTimezone","isoWeekYear","fourthOfJanuaryDay","diff","daysInMonths","isLeapYearIndex","_year","_hours"],"mappings":"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","x_google_ignoreList":[0]}