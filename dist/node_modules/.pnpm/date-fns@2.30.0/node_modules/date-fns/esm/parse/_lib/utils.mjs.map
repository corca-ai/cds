{"version":3,"file":"utils.mjs","sources":["../../../../../../../../../node_modules/.pnpm/date-fns@2.30.0/node_modules/date-fns/esm/parse/_lib/utils.js"],"sourcesContent":["import { millisecondsInHour, millisecondsInMinute, millisecondsInSecond } from \"../../constants/index.js\";\nimport { numericPatterns } from \"./constants.js\";\nexport function mapValue(parseFnResult, mapFn) {\n  if (!parseFnResult) {\n    return parseFnResult;\n  }\n  return {\n    value: mapFn(parseFnResult.value),\n    rest: parseFnResult.rest\n  };\n}\nexport function parseNumericPattern(pattern, dateString) {\n  var matchResult = dateString.match(pattern);\n  if (!matchResult) {\n    return null;\n  }\n  return {\n    value: parseInt(matchResult[0], 10),\n    rest: dateString.slice(matchResult[0].length)\n  };\n}\nexport function parseTimezonePattern(pattern, dateString) {\n  var matchResult = dateString.match(pattern);\n  if (!matchResult) {\n    return null;\n  }\n\n  // Input is 'Z'\n  if (matchResult[0] === 'Z') {\n    return {\n      value: 0,\n      rest: dateString.slice(1)\n    };\n  }\n  var sign = matchResult[1] === '+' ? 1 : -1;\n  var hours = matchResult[2] ? parseInt(matchResult[2], 10) : 0;\n  var minutes = matchResult[3] ? parseInt(matchResult[3], 10) : 0;\n  var seconds = matchResult[5] ? parseInt(matchResult[5], 10) : 0;\n  return {\n    value: sign * (hours * millisecondsInHour + minutes * millisecondsInMinute + seconds * millisecondsInSecond),\n    rest: dateString.slice(matchResult[0].length)\n  };\n}\nexport function parseAnyDigitsSigned(dateString) {\n  return parseNumericPattern(numericPatterns.anyDigitsSigned, dateString);\n}\nexport function parseNDigits(n, dateString) {\n  switch (n) {\n    case 1:\n      return parseNumericPattern(numericPatterns.singleDigit, dateString);\n    case 2:\n      return parseNumericPattern(numericPatterns.twoDigits, dateString);\n    case 3:\n      return parseNumericPattern(numericPatterns.threeDigits, dateString);\n    case 4:\n      return parseNumericPattern(numericPatterns.fourDigits, dateString);\n    default:\n      return parseNumericPattern(new RegExp('^\\\\d{1,' + n + '}'), dateString);\n  }\n}\nexport function parseNDigitsSigned(n, dateString) {\n  switch (n) {\n    case 1:\n      return parseNumericPattern(numericPatterns.singleDigitSigned, dateString);\n    case 2:\n      return parseNumericPattern(numericPatterns.twoDigitsSigned, dateString);\n    case 3:\n      return parseNumericPattern(numericPatterns.threeDigitsSigned, dateString);\n    case 4:\n      return parseNumericPattern(numericPatterns.fourDigitsSigned, dateString);\n    default:\n      return parseNumericPattern(new RegExp('^-?\\\\d{1,' + n + '}'), dateString);\n  }\n}\nexport function dayPeriodEnumToHours(dayPeriod) {\n  switch (dayPeriod) {\n    case 'morning':\n      return 4;\n    case 'evening':\n      return 17;\n    case 'pm':\n    case 'noon':\n    case 'afternoon':\n      return 12;\n    case 'am':\n    case 'midnight':\n    case 'night':\n    default:\n      return 0;\n  }\n}\nexport function normalizeTwoDigitYear(twoDigitYear, currentYear) {\n  var isCommonEra = currentYear > 0;\n  // Absolute number of the current year:\n  // 1 -> 1 AC\n  // 0 -> 1 BC\n  // -1 -> 2 BC\n  var absCurrentYear = isCommonEra ? currentYear : 1 - currentYear;\n  var result;\n  if (absCurrentYear <= 50) {\n    result = twoDigitYear || 100;\n  } else {\n    var rangeEnd = absCurrentYear + 50;\n    var rangeEndCentury = Math.floor(rangeEnd / 100) * 100;\n    var isPreviousCentury = twoDigitYear >= rangeEnd % 100;\n    result = twoDigitYear + rangeEndCentury - (isPreviousCentury ? 100 : 0);\n  }\n  return isCommonEra ? result : 1 - result;\n}\nexport function isLeapYearIndex(year) {\n  return year % 400 === 0 || year % 4 === 0 && year % 100 !== 0;\n}"],"names":["mapValue","parseFnResult","mapFn","parseNumericPattern","pattern","dateString","matchResult","parseTimezonePattern","sign","hours","minutes","seconds","millisecondsInHour","millisecondsInMinute","millisecondsInSecond","parseAnyDigitsSigned","numericPatterns","parseNDigits","n","parseNDigitsSigned","dayPeriodEnumToHours","dayPeriod","normalizeTwoDigitYear","twoDigitYear","currentYear","isCommonEra","absCurrentYear","result","rangeEnd","rangeEndCentury","isPreviousCentury","isLeapYearIndex","year"],"mappings":"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","x_google_ignoreList":[0]}