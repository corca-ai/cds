import l from "../../../../../../../@babel_runtime@7.24.8/node_modules/@babel/runtime/helpers/esm/classCallCheck.mjs";
import p from "../../../../../../../@babel_runtime@7.24.8/node_modules/@babel/runtime/helpers/esm/createClass.mjs";
import m from "../../../../../../../@babel_runtime@7.24.8/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.mjs";
import h from "../../../../../../../@babel_runtime@7.24.8/node_modules/@babel/runtime/helpers/esm/inherits.mjs";
import M from "../../../../../../../@babel_runtime@7.24.8/node_modules/@babel/runtime/helpers/esm/createSuper.mjs";
import u from "../../../../../../../@babel_runtime@7.24.8/node_modules/@babel/runtime/helpers/esm/defineProperty.mjs";
import { mapValue as i, parseNDigits as v, parseNumericPattern as w } from "../utils.mjs";
import { Parser as b } from "../Parser.mjs";
import { numericPatterns as x } from "../constants.mjs";
var I = /* @__PURE__ */ function(c) {
  h(n, c);
  var s = M(n);
  function n() {
    var o;
    l(this, n);
    for (var r = arguments.length, e = new Array(r), t = 0; t < r; t++)
      e[t] = arguments[t];
    return o = s.call.apply(s, [this].concat(e)), u(m(o), "incompatibleTokens", ["Y", "R", "q", "Q", "L", "w", "I", "D", "i", "e", "c", "t", "T"]), u(m(o), "priority", 110), o;
  }
  return p(n, [{
    key: "parse",
    value: function(r, e, t) {
      var a = function(f) {
        return f - 1;
      };
      switch (e) {
        case "M":
          return i(w(x.month, r), a);
        case "MM":
          return i(v(2, r), a);
        case "Mo":
          return i(t.ordinalNumber(r, {
            unit: "month"
          }), a);
        case "MMM":
          return t.month(r, {
            width: "abbreviated",
            context: "formatting"
          }) || t.month(r, {
            width: "narrow",
            context: "formatting"
          });
        case "MMMMM":
          return t.month(r, {
            width: "narrow",
            context: "formatting"
          });
        case "MMMM":
        default:
          return t.month(r, {
            width: "wide",
            context: "formatting"
          }) || t.month(r, {
            width: "abbreviated",
            context: "formatting"
          }) || t.month(r, {
            width: "narrow",
            context: "formatting"
          });
      }
    }
  }, {
    key: "validate",
    value: function(r, e) {
      return e >= 0 && e <= 11;
    }
  }, {
    key: "set",
    value: function(r, e, t) {
      return r.setUTCMonth(t, 1), r.setUTCHours(0, 0, 0, 0), r;
    }
  }]), n;
}(b);
export {
  I as MonthParser
};
//# sourceMappingURL=MonthParser.mjs.map
