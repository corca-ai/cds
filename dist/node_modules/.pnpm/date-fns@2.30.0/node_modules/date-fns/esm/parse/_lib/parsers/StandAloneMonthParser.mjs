import p from "../../../../../../../@babel_runtime@7.24.8/node_modules/@babel/runtime/helpers/esm/classCallCheck.mjs";
import f from "../../../../../../../@babel_runtime@7.24.8/node_modules/@babel/runtime/helpers/esm/createClass.mjs";
import u from "../../../../../../../@babel_runtime@7.24.8/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.mjs";
import h from "../../../../../../../@babel_runtime@7.24.8/node_modules/@babel/runtime/helpers/esm/inherits.mjs";
import L from "../../../../../../../@babel_runtime@7.24.8/node_modules/@babel/runtime/helpers/esm/createSuper.mjs";
import l from "../../../../../../../@babel_runtime@7.24.8/node_modules/@babel/runtime/helpers/esm/defineProperty.mjs";
import { Parser as d } from "../Parser.mjs";
import { numericPatterns as v } from "../constants.mjs";
import { mapValue as s, parseNDigits as w, parseNumericPattern as b } from "../utils.mjs";
var D = /* @__PURE__ */ function(m) {
  h(o, m);
  var i = L(o);
  function o() {
    var n;
    p(this, o);
    for (var r = arguments.length, e = new Array(r), t = 0; t < r; t++)
      e[t] = arguments[t];
    return n = i.call.apply(i, [this].concat(e)), l(u(n), "priority", 110), l(u(n), "incompatibleTokens", ["Y", "R", "q", "Q", "M", "w", "I", "D", "i", "e", "c", "t", "T"]), n;
  }
  return f(o, [{
    key: "parse",
    value: function(r, e, t) {
      var a = function(c) {
        return c - 1;
      };
      switch (e) {
        case "L":
          return s(b(v.month, r), a);
        case "LL":
          return s(w(2, r), a);
        case "Lo":
          return s(t.ordinalNumber(r, {
            unit: "month"
          }), a);
        case "LLL":
          return t.month(r, {
            width: "abbreviated",
            context: "standalone"
          }) || t.month(r, {
            width: "narrow",
            context: "standalone"
          });
        case "LLLLL":
          return t.month(r, {
            width: "narrow",
            context: "standalone"
          });
        case "LLLL":
        default:
          return t.month(r, {
            width: "wide",
            context: "standalone"
          }) || t.month(r, {
            width: "abbreviated",
            context: "standalone"
          }) || t.month(r, {
            width: "narrow",
            context: "standalone"
          });
      }
    }
  }, {
    key: "validate",
    value: function(r, e) {
      return e >= 0 && e <= 11;
    }
  }, {
    key: "set",
    value: function(r, e, t) {
      return r.setUTCMonth(t, 1), r.setUTCHours(0, 0, 0, 0), r;
    }
  }]), o;
}(d);
export {
  D as StandAloneMonthParser
};
//# sourceMappingURL=StandAloneMonthParser.mjs.map
