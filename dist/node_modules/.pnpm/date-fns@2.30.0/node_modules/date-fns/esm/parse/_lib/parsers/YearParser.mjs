import y from "../../../../../../../@babel_runtime@7.24.8/node_modules/@babel/runtime/helpers/esm/classCallCheck.mjs";
import T from "../../../../../../../@babel_runtime@7.24.8/node_modules/@babel/runtime/helpers/esm/createClass.mjs";
import m from "../../../../../../../@babel_runtime@7.24.8/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.mjs";
import v from "../../../../../../../@babel_runtime@7.24.8/node_modules/@babel/runtime/helpers/esm/inherits.mjs";
import Y from "../../../../../../../@babel_runtime@7.24.8/node_modules/@babel/runtime/helpers/esm/createSuper.mjs";
import c from "../../../../../../../@babel_runtime@7.24.8/node_modules/@babel/runtime/helpers/esm/defineProperty.mjs";
import { Parser as C } from "../Parser.mjs";
import { mapValue as n, parseNDigits as p, normalizeTwoDigitYear as h } from "../utils.mjs";
var k = /* @__PURE__ */ function(f) {
  v(t, f);
  var u = Y(t);
  function t() {
    var i;
    y(this, t);
    for (var r = arguments.length, e = new Array(r), a = 0; a < r; a++)
      e[a] = arguments[a];
    return i = u.call.apply(u, [this].concat(e)), c(m(i), "priority", 130), c(m(i), "incompatibleTokens", ["Y", "R", "u", "w", "I", "i", "e", "c", "t", "T"]), i;
  }
  return T(t, [{
    key: "parse",
    value: function(r, e, a) {
      var o = function(s) {
        return {
          year: s,
          isTwoDigitYear: e === "yy"
        };
      };
      switch (e) {
        case "y":
          return n(p(4, r), o);
        case "yo":
          return n(a.ordinalNumber(r, {
            unit: "year"
          }), o);
        default:
          return n(p(e.length, r), o);
      }
    }
  }, {
    key: "validate",
    value: function(r, e) {
      return e.isTwoDigitYear || e.year > 0;
    }
  }, {
    key: "set",
    value: function(r, e, a) {
      var o = r.getUTCFullYear();
      if (a.isTwoDigitYear) {
        var l = h(a.year, o);
        return r.setUTCFullYear(l, 0, 1), r.setUTCHours(0, 0, 0, 0), r;
      }
      var s = !("era" in e) || e.era === 1 ? a.year : 1 - a.year;
      return r.setUTCFullYear(s, 0, 1), r.setUTCHours(0, 0, 0, 0), r;
    }
  }]), t;
}(C);
export {
  k as YearParser
};
//# sourceMappingURL=YearParser.mjs.map
