{"version":3,"file":"detectOverflow.mjs","sources":["../../../../../../../../../node_modules/.pnpm/@popperjs+core@2.11.8/node_modules/@popperjs/core/lib/utils/detectOverflow.js"],"sourcesContent":["import getClippingRect from \"../dom-utils/getClippingRect.js\";\nimport getDocumentElement from \"../dom-utils/getDocumentElement.js\";\nimport getBoundingClientRect from \"../dom-utils/getBoundingClientRect.js\";\nimport computeOffsets from \"./computeOffsets.js\";\nimport rectToClientRect from \"./rectToClientRect.js\";\nimport { clippingParents, reference, popper, bottom, top, right, basePlacements, viewport } from \"../enums.js\";\nimport { isElement } from \"../dom-utils/instanceOf.js\";\nimport mergePaddingObject from \"./mergePaddingObject.js\";\nimport expandToHashMap from \"./expandToHashMap.js\"; // eslint-disable-next-line import/no-unused-modules\n\nexport default function detectOverflow(state, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var _options = options,\n      _options$placement = _options.placement,\n      placement = _options$placement === void 0 ? state.placement : _options$placement,\n      _options$strategy = _options.strategy,\n      strategy = _options$strategy === void 0 ? state.strategy : _options$strategy,\n      _options$boundary = _options.boundary,\n      boundary = _options$boundary === void 0 ? clippingParents : _options$boundary,\n      _options$rootBoundary = _options.rootBoundary,\n      rootBoundary = _options$rootBoundary === void 0 ? viewport : _options$rootBoundary,\n      _options$elementConte = _options.elementContext,\n      elementContext = _options$elementConte === void 0 ? popper : _options$elementConte,\n      _options$altBoundary = _options.altBoundary,\n      altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary,\n      _options$padding = _options.padding,\n      padding = _options$padding === void 0 ? 0 : _options$padding;\n  var paddingObject = mergePaddingObject(typeof padding !== 'number' ? padding : expandToHashMap(padding, basePlacements));\n  var altContext = elementContext === popper ? reference : popper;\n  var popperRect = state.rects.popper;\n  var element = state.elements[altBoundary ? altContext : elementContext];\n  var clippingClientRect = getClippingRect(isElement(element) ? element : element.contextElement || getDocumentElement(state.elements.popper), boundary, rootBoundary, strategy);\n  var referenceClientRect = getBoundingClientRect(state.elements.reference);\n  var popperOffsets = computeOffsets({\n    reference: referenceClientRect,\n    element: popperRect,\n    strategy: 'absolute',\n    placement: placement\n  });\n  var popperClientRect = rectToClientRect(Object.assign({}, popperRect, popperOffsets));\n  var elementClientRect = elementContext === popper ? popperClientRect : referenceClientRect; // positive = overflowing the clipping rect\n  // 0 or negative = within the clipping rect\n\n  var overflowOffsets = {\n    top: clippingClientRect.top - elementClientRect.top + paddingObject.top,\n    bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,\n    left: clippingClientRect.left - elementClientRect.left + paddingObject.left,\n    right: elementClientRect.right - clippingClientRect.right + paddingObject.right\n  };\n  var offsetData = state.modifiersData.offset; // Offsets can be applied only to the popper element\n\n  if (elementContext === popper && offsetData) {\n    var offset = offsetData[placement];\n    Object.keys(overflowOffsets).forEach(function (key) {\n      var multiply = [right, bottom].indexOf(key) >= 0 ? 1 : -1;\n      var axis = [top, bottom].indexOf(key) >= 0 ? 'y' : 'x';\n      overflowOffsets[key] += offset[axis] * multiply;\n    });\n  }\n\n  return overflowOffsets;\n}"],"names":["detectOverflow","state","options","_options","_options$placement","placement","_options$strategy","strategy","_options$boundary","boundary","clippingParents","_options$rootBoundary","rootBoundary","viewport","_options$elementConte","elementContext","popper","_options$altBoundary","altBoundary","_options$padding","padding","paddingObject","mergePaddingObject","expandToHashMap","basePlacements","altContext","reference","popperRect","element","clippingClientRect","getClippingRect","isElement","getDocumentElement","referenceClientRect","getBoundingClientRect","popperOffsets","computeOffsets","popperClientRect","rectToClientRect","elementClientRect","overflowOffsets","offsetData","offset","key","multiply","right","bottom","axis","top"],"mappings":";;;;;;;;;AAUe,SAASA,GAAeC,GAAOC,GAAS;AACrD,EAAIA,MAAY,WACdA,IAAU,CAAA;AAGZ,MAAIC,IAAWD,GACXE,IAAqBD,EAAS,WAC9BE,IAAYD,MAAuB,SAASH,EAAM,YAAYG,GAC9DE,IAAoBH,EAAS,UAC7BI,IAAWD,MAAsB,SAASL,EAAM,WAAWK,GAC3DE,IAAoBL,EAAS,UAC7BM,IAAWD,MAAsB,SAASE,IAAkBF,GAC5DG,IAAwBR,EAAS,cACjCS,IAAeD,MAA0B,SAASE,IAAWF,GAC7DG,IAAwBX,EAAS,gBACjCY,IAAiBD,MAA0B,SAASE,IAASF,GAC7DG,IAAuBd,EAAS,aAChCe,IAAcD,MAAyB,SAAS,KAAQA,GACxDE,IAAmBhB,EAAS,SAC5BiB,IAAUD,MAAqB,SAAS,IAAIA,GAC5CE,IAAgBC,EAAmB,OAAOF,KAAY,WAAWA,IAAUG,EAAgBH,GAASI,CAAc,CAAC,GACnHC,IAAaV,MAAmBC,IAASU,IAAYV,GACrDW,IAAa1B,EAAM,MAAM,QACzB2B,IAAU3B,EAAM,SAASiB,IAAcO,IAAaV,CAAc,GAClEc,IAAqBC,EAAgBC,EAAUH,CAAO,IAAIA,IAAUA,EAAQ,kBAAkBI,EAAmB/B,EAAM,SAAS,MAAM,GAAGQ,GAAUG,GAAcL,CAAQ,GACzK0B,IAAsBC,EAAsBjC,EAAM,SAAS,SAAS,GACpEkC,IAAgBC,EAAe;AAAA,IACjC,WAAWH;AAAA,IACX,SAASN;AAAA,IACT,UAAU;AAAA,IACV,WAAWtB;AAAA,EACf,CAAG,GACGgC,IAAmBC,EAAiB,OAAO,OAAO,CAAA,GAAIX,GAAYQ,CAAa,CAAC,GAChFI,IAAoBxB,MAAmBC,IAASqB,IAAmBJ,GAGnEO,IAAkB;AAAA,IACpB,KAAKX,EAAmB,MAAMU,EAAkB,MAAMlB,EAAc;AAAA,IACpE,QAAQkB,EAAkB,SAASV,EAAmB,SAASR,EAAc;AAAA,IAC7E,MAAMQ,EAAmB,OAAOU,EAAkB,OAAOlB,EAAc;AAAA,IACvE,OAAOkB,EAAkB,QAAQV,EAAmB,QAAQR,EAAc;AAAA,EAC9E,GACMoB,IAAaxC,EAAM,cAAc;AAErC,MAAIc,MAAmBC,KAAUyB,GAAY;AAC3C,QAAIC,IAASD,EAAWpC,CAAS;AACjC,WAAO,KAAKmC,CAAe,EAAE,QAAQ,SAAUG,GAAK;AAClD,UAAIC,IAAW,CAACC,GAAOC,CAAM,EAAE,QAAQH,CAAG,KAAK,IAAI,IAAI,IACnDI,IAAO,CAACC,GAAKF,CAAM,EAAE,QAAQH,CAAG,KAAK,IAAI,MAAM;AACnD,MAAAH,EAAgBG,CAAG,KAAKD,EAAOK,CAAI,IAAIH;AAAA,IAC7C,CAAK;AAAA,EACF;AAED,SAAOJ;AACT;","x_google_ignoreList":[0]}