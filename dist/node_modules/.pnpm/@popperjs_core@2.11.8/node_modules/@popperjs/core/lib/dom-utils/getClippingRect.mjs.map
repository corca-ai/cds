{"version":3,"file":"getClippingRect.mjs","sources":["../../../../../../../../../node_modules/.pnpm/@popperjs+core@2.11.8/node_modules/@popperjs/core/lib/dom-utils/getClippingRect.js"],"sourcesContent":["import { viewport } from \"../enums.js\";\nimport getViewportRect from \"./getViewportRect.js\";\nimport getDocumentRect from \"./getDocumentRect.js\";\nimport listScrollParents from \"./listScrollParents.js\";\nimport getOffsetParent from \"./getOffsetParent.js\";\nimport getDocumentElement from \"./getDocumentElement.js\";\nimport getComputedStyle from \"./getComputedStyle.js\";\nimport { isElement, isHTMLElement } from \"./instanceOf.js\";\nimport getBoundingClientRect from \"./getBoundingClientRect.js\";\nimport getParentNode from \"./getParentNode.js\";\nimport contains from \"./contains.js\";\nimport getNodeName from \"./getNodeName.js\";\nimport rectToClientRect from \"../utils/rectToClientRect.js\";\nimport { max, min } from \"../utils/math.js\";\n\nfunction getInnerBoundingClientRect(element, strategy) {\n  var rect = getBoundingClientRect(element, false, strategy === 'fixed');\n  rect.top = rect.top + element.clientTop;\n  rect.left = rect.left + element.clientLeft;\n  rect.bottom = rect.top + element.clientHeight;\n  rect.right = rect.left + element.clientWidth;\n  rect.width = element.clientWidth;\n  rect.height = element.clientHeight;\n  rect.x = rect.left;\n  rect.y = rect.top;\n  return rect;\n}\n\nfunction getClientRectFromMixedType(element, clippingParent, strategy) {\n  return clippingParent === viewport ? rectToClientRect(getViewportRect(element, strategy)) : isElement(clippingParent) ? getInnerBoundingClientRect(clippingParent, strategy) : rectToClientRect(getDocumentRect(getDocumentElement(element)));\n} // A \"clipping parent\" is an overflowable container with the characteristic of\n// clipping (or hiding) overflowing elements with a position different from\n// `initial`\n\n\nfunction getClippingParents(element) {\n  var clippingParents = listScrollParents(getParentNode(element));\n  var canEscapeClipping = ['absolute', 'fixed'].indexOf(getComputedStyle(element).position) >= 0;\n  var clipperElement = canEscapeClipping && isHTMLElement(element) ? getOffsetParent(element) : element;\n\n  if (!isElement(clipperElement)) {\n    return [];\n  } // $FlowFixMe[incompatible-return]: https://github.com/facebook/flow/issues/1414\n\n\n  return clippingParents.filter(function (clippingParent) {\n    return isElement(clippingParent) && contains(clippingParent, clipperElement) && getNodeName(clippingParent) !== 'body';\n  });\n} // Gets the maximum area that the element is visible in due to any number of\n// clipping parents\n\n\nexport default function getClippingRect(element, boundary, rootBoundary, strategy) {\n  var mainClippingParents = boundary === 'clippingParents' ? getClippingParents(element) : [].concat(boundary);\n  var clippingParents = [].concat(mainClippingParents, [rootBoundary]);\n  var firstClippingParent = clippingParents[0];\n  var clippingRect = clippingParents.reduce(function (accRect, clippingParent) {\n    var rect = getClientRectFromMixedType(element, clippingParent, strategy);\n    accRect.top = max(rect.top, accRect.top);\n    accRect.right = min(rect.right, accRect.right);\n    accRect.bottom = min(rect.bottom, accRect.bottom);\n    accRect.left = max(rect.left, accRect.left);\n    return accRect;\n  }, getClientRectFromMixedType(element, firstClippingParent, strategy));\n  clippingRect.width = clippingRect.right - clippingRect.left;\n  clippingRect.height = clippingRect.bottom - clippingRect.top;\n  clippingRect.x = clippingRect.left;\n  clippingRect.y = clippingRect.top;\n  return clippingRect;\n}"],"names":["getInnerBoundingClientRect","element","strategy","rect","getBoundingClientRect","getClientRectFromMixedType","clippingParent","viewport","rectToClientRect","getViewportRect","isElement","getDocumentRect","getDocumentElement","getClippingParents","clippingParents","listScrollParents","getParentNode","canEscapeClipping","getComputedStyle","clipperElement","isHTMLElement","getOffsetParent","contains","getNodeName","getClippingRect","boundary","rootBoundary","mainClippingParents","firstClippingParent","clippingRect","accRect","max","min"],"mappings":";;;;;;;;;;;;;;AAeA,SAASA,EAA2BC,GAASC,GAAU;AACrD,MAAIC,IAAOC,EAAsBH,GAAS,IAAOC,MAAa,OAAO;AACrE,SAAAC,EAAK,MAAMA,EAAK,MAAMF,EAAQ,WAC9BE,EAAK,OAAOA,EAAK,OAAOF,EAAQ,YAChCE,EAAK,SAASA,EAAK,MAAMF,EAAQ,cACjCE,EAAK,QAAQA,EAAK,OAAOF,EAAQ,aACjCE,EAAK,QAAQF,EAAQ,aACrBE,EAAK,SAASF,EAAQ,cACtBE,EAAK,IAAIA,EAAK,MACdA,EAAK,IAAIA,EAAK,KACPA;AACT;AAEA,SAASE,EAA2BJ,GAASK,GAAgBJ,GAAU;AACrE,SAAOI,MAAmBC,IAAWC,EAAiBC,EAAgBR,GAASC,CAAQ,CAAC,IAAIQ,EAAUJ,CAAc,IAAIN,EAA2BM,GAAgBJ,CAAQ,IAAIM,EAAiBG,EAAgBC,EAAmBX,CAAO,CAAC,CAAC;AAC9O;AAKA,SAASY,EAAmBZ,GAAS;AACnC,MAAIa,IAAkBC,EAAkBC,EAAcf,CAAO,CAAC,GAC1DgB,IAAoB,CAAC,YAAY,OAAO,EAAE,QAAQC,EAAiBjB,CAAO,EAAE,QAAQ,KAAK,GACzFkB,IAAiBF,KAAqBG,EAAcnB,CAAO,IAAIoB,EAAgBpB,CAAO,IAAIA;AAE9F,SAAKS,EAAUS,CAAc,IAKtBL,EAAgB,OAAO,SAAUR,GAAgB;AACtD,WAAOI,EAAUJ,CAAc,KAAKgB,EAAShB,GAAgBa,CAAc,KAAKI,EAAYjB,CAAc,MAAM;AAAA,EACpH,CAAG,IANQ;AAOX;AAIe,SAASkB,EAAgBvB,GAASwB,GAAUC,GAAcxB,GAAU;AACjF,MAAIyB,IAAsBF,MAAa,oBAAoBZ,EAAmBZ,CAAO,IAAI,CAAE,EAAC,OAAOwB,CAAQ,GACvGX,IAAkB,CAAA,EAAG,OAAOa,GAAqB,CAACD,CAAY,CAAC,GAC/DE,IAAsBd,EAAgB,CAAC,GACvCe,IAAef,EAAgB,OAAO,SAAUgB,GAASxB,GAAgB;AAC3E,QAAIH,IAAOE,EAA2BJ,GAASK,GAAgBJ,CAAQ;AACvE,WAAA4B,EAAQ,MAAMC,EAAI5B,EAAK,KAAK2B,EAAQ,GAAG,GACvCA,EAAQ,QAAQE,EAAI7B,EAAK,OAAO2B,EAAQ,KAAK,GAC7CA,EAAQ,SAASE,EAAI7B,EAAK,QAAQ2B,EAAQ,MAAM,GAChDA,EAAQ,OAAOC,EAAI5B,EAAK,MAAM2B,EAAQ,IAAI,GACnCA;AAAA,EACR,GAAEzB,EAA2BJ,GAAS2B,GAAqB1B,CAAQ,CAAC;AACrE,SAAA2B,EAAa,QAAQA,EAAa,QAAQA,EAAa,MACvDA,EAAa,SAASA,EAAa,SAASA,EAAa,KACzDA,EAAa,IAAIA,EAAa,MAC9BA,EAAa,IAAIA,EAAa,KACvBA;AACT;","x_google_ignoreList":[0]}