{"version":3,"file":"cva.mjs","sources":["../../../styled-system/css/cva.mjs"],"sourcesContent":["import { compact, mergeProps, memo, splitProps, uniq } from '../helpers.mjs';\nimport { css, mergeCss } from './css.mjs';\n\nconst defaults = (conf) => ({\n  base: {},\n  variants: {},\n  defaultVariants: {},\n  compoundVariants: [],\n  ...conf,\n})\n\nexport function cva(config) {\n  const { base, variants, defaultVariants, compoundVariants } = defaults(config)\n  const getVariantProps = (variants) => ({ ...defaultVariants, ...compact(variants) })\n\n  function resolve(props = {}) {\n    const computedVariants = getVariantProps(props)\n    let variantCss = { ...base }\n    for (const [key, value] of Object.entries(computedVariants)) {\n      if (variants[key]?.[value]) {\n        variantCss = mergeCss(variantCss, variants[key][value])\n      }\n    }\n    const compoundVariantCss = getCompoundVariantCss(compoundVariants, computedVariants)\n    return mergeCss(variantCss, compoundVariantCss)\n  }\n\n  function merge(__cva) {\n    const override = defaults(__cva.config)\n    const variantKeys = uniq(__cva.variantKeys, Object.keys(variants))\n    return cva({\n      base: mergeCss(base, override.base),\n      variants: Object.fromEntries(\n        variantKeys.map((key) => [key, mergeCss(variants[key], override.variants[key])]),\n      ),\n      defaultVariants: mergeProps(defaultVariants, override.defaultVariants),\n      compoundVariants: [...compoundVariants, ...override.compoundVariants],\n    })\n  }\n\n  function cvaFn(props) {\n    return css(resolve(props))\n  }\n\n  const variantKeys = Object.keys(variants)\n\n  function splitVariantProps(props) {\n    return splitProps(props, variantKeys)\n  }\n\n  const variantMap = Object.fromEntries(Object.entries(variants).map(([key, value]) => [key, Object.keys(value)]))\n\n  return Object.assign(memo(cvaFn), {\n    __cva__: true,\n    variantMap,\n    variantKeys,\n    raw: resolve,\n    config,\n    merge,\n    splitVariantProps,\n    getVariantProps\n  })\n}\n\nexport function getCompoundVariantCss(compoundVariants, variantMap) {\n  let result = {}\n  compoundVariants.forEach((compoundVariant) => {\n    const isMatching = Object.entries(compoundVariant).every(([key, value]) => {\n      if (key === 'css') return true\n\n      const values = Array.isArray(value) ? value : [value]\n      return values.some((value) => variantMap[key] === value)\n    })\n\n    if (isMatching) {\n      result = mergeCss(result, compoundVariant.css)\n    }\n  })\n\n  return result\n}\n\nexport function assertCompoundVariant(name, compoundVariants, variants, prop) {\n  if (compoundVariants.length > 0 && typeof variants?.[prop] === 'object') {\n    throw new Error(`[recipe:${name}:${prop}] Conditions are not supported when using compound variants.`)\n  }\n}\n"],"names":["defaults","conf","cva","config","base","variants","defaultVariants","compoundVariants","getVariantProps","compact","resolve","props","computedVariants","variantCss","key","value","_a","mergeCss","compoundVariantCss","getCompoundVariantCss","merge","__cva","override","variantKeys","uniq","mergeProps","cvaFn","css","splitVariantProps","splitProps","variantMap","memo","result","compoundVariant"],"mappings":";;AAGA,MAAMA,IAAW,CAACC,OAAU;AAAA,EAC1B,MAAM,CAAE;AAAA,EACR,UAAU,CAAE;AAAA,EACZ,iBAAiB,CAAE;AAAA,EACnB,kBAAkB,CAAE;AAAA,EACpB,GAAGA;AACL;AAEO,SAASC,EAAIC,GAAQ;AAC1B,QAAM,EAAE,MAAAC,GAAM,UAAAC,GAAU,iBAAAC,GAAiB,kBAAAC,EAAkB,IAAGP,EAASG,CAAM,GACvEK,IAAkB,CAACH,OAAc,EAAE,GAAGC,GAAiB,GAAGG,EAAQJ,CAAQ;AAEhF,WAASK,EAAQC,IAAQ,IAAI;;AAC3B,UAAMC,IAAmBJ,EAAgBG,CAAK;AAC9C,QAAIE,IAAa,EAAE,GAAGT,EAAM;AAC5B,eAAW,CAACU,GAAKC,CAAK,KAAK,OAAO,QAAQH,CAAgB;AACxD,OAAII,IAAAX,EAASS,CAAG,MAAZ,QAAAE,EAAgBD,OAClBF,IAAaI,EAASJ,GAAYR,EAASS,CAAG,EAAEC,CAAK,CAAC;AAG1D,UAAMG,IAAqBC,EAAsBZ,GAAkBK,CAAgB;AACnF,WAAOK,EAASJ,GAAYK,CAAkB;AAAA,EAC/C;AAED,WAASE,EAAMC,GAAO;AACpB,UAAMC,IAAWtB,EAASqB,EAAM,MAAM,GAChCE,IAAcC,EAAKH,EAAM,aAAa,OAAO,KAAKhB,CAAQ,CAAC;AACjE,WAAOH,EAAI;AAAA,MACT,MAAMe,EAASb,GAAMkB,EAAS,IAAI;AAAA,MAClC,UAAU,OAAO;AAAA,QACfC,EAAY,IAAI,CAACT,MAAQ,CAACA,GAAKG,EAASZ,EAASS,CAAG,GAAGQ,EAAS,SAASR,CAAG,CAAC,CAAC,CAAC;AAAA,MAChF;AAAA,MACD,iBAAiBW,EAAWnB,GAAiBgB,EAAS,eAAe;AAAA,MACrE,kBAAkB,CAAC,GAAGf,GAAkB,GAAGe,EAAS,gBAAgB;AAAA,IAC1E,CAAK;AAAA,EACF;AAED,WAASI,EAAMf,GAAO;AACpB,WAAOgB,EAAIjB,EAAQC,CAAK,CAAC;AAAA,EAC1B;AAED,QAAMY,IAAc,OAAO,KAAKlB,CAAQ;AAExC,WAASuB,EAAkBjB,GAAO;AAChC,WAAOkB,EAAWlB,GAAOY,CAAW;AAAA,EACrC;AAED,QAAMO,IAAa,OAAO,YAAY,OAAO,QAAQzB,CAAQ,EAAE,IAAI,CAAC,CAACS,GAAKC,CAAK,MAAM,CAACD,GAAK,OAAO,KAAKC,CAAK,CAAC,CAAC,CAAC;AAE/G,SAAO,OAAO,OAAOgB,EAAKL,CAAK,GAAG;AAAA,IAChC,SAAS;AAAA,IACT,YAAAI;AAAA,IACA,aAAAP;AAAA,IACA,KAAKb;AAAA,IACL,QAAAP;AAAA,IACA,OAAAiB;AAAA,IACA,mBAAAQ;AAAA,IACA,iBAAApB;AAAA,EACJ,CAAG;AACH;AAEO,SAASW,EAAsBZ,GAAkBuB,GAAY;AAClE,MAAIE,IAAS,CAAE;AACf,SAAAzB,EAAiB,QAAQ,CAAC0B,MAAoB;AAQ5C,IAPmB,OAAO,QAAQA,CAAe,EAAE,MAAM,CAAC,CAACnB,GAAKC,CAAK,MAC/DD,MAAQ,QAAc,MAEX,MAAM,QAAQC,CAAK,IAAIA,IAAQ,CAACA,CAAK,GACtC,KAAK,CAACA,MAAUe,EAAWhB,CAAG,MAAMC,CAAK,CACxD,MAGCiB,IAASf,EAASe,GAAQC,EAAgB,GAAG;AAAA,EAEnD,CAAG,GAEMD;AACT;"}