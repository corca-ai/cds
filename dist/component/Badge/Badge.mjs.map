{"version":3,"file":"Badge.mjs","sources":["../../../src/component/Badge/Badge.tsx"],"sourcesContent":["import { forwardRef, ReactNode } from 'react';\nimport { cx, RecipeVariantProps, sva } from '../../../styled-system/css';\n\ntype BadgeVaraint = NonNullable<RecipeVariantProps<typeof badgeSlot>>['variant'];\n\nexport interface BadgeProps extends React.HTMLAttributes<HTMLSpanElement> {\n  label?: ReactNode;\n  dotted?: boolean;\n  /**\n   * @default 'grey'\n   */\n  variant?: BadgeVaraint;\n}\n\nexport const Badge = forwardRef<HTMLSpanElement, BadgeProps>(function Badge(badgeProps, ref) {\n  const { className, label, variant, dotted, ...props } = badgeProps;\n  const classes = badgeSlot({ variant, dotted });\n  return (\n    <span ref={ref} {...props} className={cx(classes.root, className)}>\n      <span className={classes.text}>{label}</span>\n    </span>\n  );\n});\n\nBadge.displayName = 'Badge';\n\nconst badgeSlot = sva({\n  slots: ['root', 'text'],\n  base: {\n    root: {\n      width: 'fit-content',\n      display: 'inline-flex',\n      gap: '6px',\n      justifyContent: 'center',\n      alignItems: 'center',\n      height: '22px',\n      padding: '2px 8px',\n      borderRadius: '10px',\n    },\n    text: {\n      textStyle: 'b6',\n    },\n  },\n  variants: {\n    variant: {\n      green: {\n        root: { bg: 'etc.active.10' },\n        text: { color: 'etc.active.30' },\n      },\n      grey: {\n        root: { bg: '#E9EAED' },\n        text: { color: '#343F51' },\n      },\n      yellow: {\n        root: { bg: '#FFF7CC' },\n        text: { color: '#E87E00' },\n      },\n      red: {\n        root: { bg: 'etc.error.10' },\n        text: { color: 'etc.error.30' },\n      },\n    },\n    dotted: {\n      true: {\n        root: {\n          _before: {\n            content: '\"\"',\n            width: '6px',\n            height: '6px',\n            borderRadius: '50%',\n          },\n        },\n      },\n    },\n  },\n  defaultVariants: {\n    variant: 'grey',\n  },\n  compoundVariants: [\n    {\n      variant: 'green',\n      dotted: true,\n      css: {\n        root: {\n          _before: {\n            bg: 'etc.active.20',\n          },\n        },\n      },\n    },\n    {\n      variant: 'grey',\n      dotted: true,\n      css: {\n        root: {\n          _before: {\n            bg: '#6C778B',\n          },\n        },\n      },\n    },\n    {\n      variant: 'yellow',\n      dotted: true,\n      css: {\n        root: {\n          _before: {\n            bg: '#E87E00',\n          },\n        },\n      },\n    },\n    {\n      variant: 'red',\n      dotted: true,\n      css: {\n        root: {\n          _before: {\n            bg: 'etc.error.30',\n          },\n        },\n      },\n    },\n  ],\n});\n"],"names":["Badge","forwardRef","badgeProps","ref","className","label","variant","dotted","props","classes","badgeSlot","cx","jsx","sva"],"mappings":";;;;AAcO,MAAMA,IAAQC,EAAwC,SAAeC,GAAYC,GAAK;AAC3F,QAAM,EAAE,WAAAC,GAAW,OAAAC,GAAO,SAAAC,GAAS,QAAAC,GAAQ,GAAGC,EAAU,IAAAN,GAClDO,IAAUC,EAAU,EAAE,SAAAJ,GAAS,QAAAC,EAAQ,CAAA;AAC7C,2BACG,QAAK,EAAA,KAAAJ,GAAW,GAAGK,GAAO,WAAWG,EAAGF,EAAQ,MAAML,CAAS,GAC9D,UAAC,gBAAAQ,EAAA,QAAA,EAAK,WAAWH,EAAQ,MAAO,aAAM,EACxC,CAAA;AAEJ,CAAC;AAEDT,EAAM,cAAc;AAEpB,MAAMU,IAAYG,EAAI;AAAA,EACpB,OAAO,CAAC,QAAQ,MAAM;AAAA,EACtB,MAAM;AAAA,IACJ,MAAM;AAAA,MACJ,OAAO;AAAA,MACP,SAAS;AAAA,MACT,KAAK;AAAA,MACL,gBAAgB;AAAA,MAChB,YAAY;AAAA,MACZ,QAAQ;AAAA,MACR,SAAS;AAAA,MACT,cAAc;AAAA,IAChB;AAAA,IACA,MAAM;AAAA,MACJ,WAAW;AAAA,IACb;AAAA,EACF;AAAA,EACA,UAAU;AAAA,IACR,SAAS;AAAA,MACP,OAAO;AAAA,QACL,MAAM,EAAE,IAAI,gBAAgB;AAAA,QAC5B,MAAM,EAAE,OAAO,gBAAgB;AAAA,MACjC;AAAA,MACA,MAAM;AAAA,QACJ,MAAM,EAAE,IAAI,UAAU;AAAA,QACtB,MAAM,EAAE,OAAO,UAAU;AAAA,MAC3B;AAAA,MACA,QAAQ;AAAA,QACN,MAAM,EAAE,IAAI,UAAU;AAAA,QACtB,MAAM,EAAE,OAAO,UAAU;AAAA,MAC3B;AAAA,MACA,KAAK;AAAA,QACH,MAAM,EAAE,IAAI,eAAe;AAAA,QAC3B,MAAM,EAAE,OAAO,eAAe;AAAA,MAChC;AAAA,IACF;AAAA,IACA,QAAQ;AAAA,MACN,MAAM;AAAA,QACJ,MAAM;AAAA,UACJ,SAAS;AAAA,YACP,SAAS;AAAA,YACT,OAAO;AAAA,YACP,QAAQ;AAAA,YACR,cAAc;AAAA,UAChB;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA,EACA,iBAAiB;AAAA,IACf,SAAS;AAAA,EACX;AAAA,EACA,kBAAkB;AAAA,IAChB;AAAA,MACE,SAAS;AAAA,MACT,QAAQ;AAAA,MACR,KAAK;AAAA,QACH,MAAM;AAAA,UACJ,SAAS;AAAA,YACP,IAAI;AAAA,UACN;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,IACA;AAAA,MACE,SAAS;AAAA,MACT,QAAQ;AAAA,MACR,KAAK;AAAA,QACH,MAAM;AAAA,UACJ,SAAS;AAAA,YACP,IAAI;AAAA,UACN;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,IACA;AAAA,MACE,SAAS;AAAA,MACT,QAAQ;AAAA,MACR,KAAK;AAAA,QACH,MAAM;AAAA,UACJ,SAAS;AAAA,YACP,IAAI;AAAA,UACN;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,IACA;AAAA,MACE,SAAS;AAAA,MACT,QAAQ;AAAA,MACR,KAAK;AAAA,QACH,MAAM;AAAA,UACJ,SAAS;AAAA,YACP,IAAI;AAAA,UACN;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,EACF;AACF,CAAC;"}