{"version":3,"file":"Badge-rWTz8MRu.cjs","sources":["../src/styled-system/css/sva.mjs","../src/component/Button/button.tsx","../src/component/Badge/Badge.tsx"],"sourcesContent":["import { compact, getSlotRecipes, memo, splitProps } from '../helpers.mjs';\nimport { cva } from './cva.mjs';\nimport { cx } from './cx.mjs';\n\nconst slotClass = (className, slot) => className + '__' + slot\n\nexport function sva(config) {\n  const slots = Object.entries(getSlotRecipes(config)).map(([slot, slotCva]) => [slot, cva(slotCva)])\n  const defaultVariants = config.defaultVariants ?? {}\n\n  function svaFn(props) {\n    const result = slots.map(([slot, cvaFn]) => [slot, cx(cvaFn(props), config.className && slotClass(config.className, slot))])\n    return Object.fromEntries(result)\n  }\n\n  function raw(props) {\n    const result = slots.map(([slot, cvaFn]) => [slot, cvaFn.raw(props)])\n    return Object.fromEntries(result)\n  }\n\n  const variants = config.variants ?? {};\n  const variantKeys = Object.keys(variants);\n\n  function splitVariantProps(props) {\n    return splitProps(props, variantKeys);\n  }\n  const getVariantProps = (variants) => ({ ...(defaultVariants || {}), ...compact(variants) })\n\n  const variantMap = Object.fromEntries(\n    Object.entries(variants).map(([key, value]) => [key, Object.keys(value)])\n  );\n\n  return Object.assign(memo(svaFn), {\n    __cva__: false,\n    raw,\n    variantMap,\n    variantKeys,\n    splitVariantProps,\n    getVariantProps,\n  })\n}","import { ReactNode } from 'react';\nimport { css } from '../../styled-system/css';\n\nexport interface IButtonProps {\n  children: ReactNode;\n}\n\nexport const Button = ({ children }: IButtonProps) => {\n  return (\n    <button\n      className={css({\n        color: 'etc.white',\n        bg: 'etc.focus',\n        textStyle: 'b1',\n      })}\n    >\n      {children}\n    </button>\n  );\n};\n","import { forwardRef, ReactNode } from 'react';\nimport { cx, RecipeVariantProps, sva } from '../../styled-system/css';\n\ntype BadgeVaraint = NonNullable<RecipeVariantProps<typeof badgeSlot>>['variant'];\n\nexport interface BadgeProps extends React.HTMLAttributes<HTMLSpanElement> {\n  label?: ReactNode;\n  dotted?: boolean;\n  /**\n   * @default 'grey'\n   */\n  variant?: BadgeVaraint;\n}\n\nexport const Badge = forwardRef<HTMLSpanElement, BadgeProps>(function Badge(badgeProps, ref) {\n  const { className, label, variant, dotted, ...props } = badgeProps;\n  const classes = badgeSlot({ variant, dotted });\n  return (\n    <span ref={ref} {...props} className={cx(classes.root, className)}>\n      <span className={classes.text}>{label}</span>\n    </span>\n  );\n});\n\nBadge.displayName = 'Badge';\n\nconst badgeSlot = sva({\n  slots: ['root', 'text'],\n  base: {\n    root: {\n      width: 'fit-content',\n      display: 'inline-flex',\n      gap: '6px',\n      justifyContent: 'center',\n      alignItems: 'center',\n      height: '22px',\n      padding: '2px 8px',\n      borderRadius: '10px',\n    },\n    text: {\n      textStyle: 'b6',\n    },\n  },\n  variants: {\n    variant: {\n      green: {\n        root: { bg: 'etc.active.10' },\n        text: { color: 'etc.active.30' },\n      },\n      grey: {\n        root: { bg: '#E9EAED' },\n        text: { color: '#343F51' },\n      },\n      yellow: {\n        root: { bg: '#FFF7CC' },\n        text: { color: '#E87E00' },\n      },\n      red: {\n        root: { bg: 'etc.error.10' },\n        text: { color: 'etc.error.30' },\n      },\n    },\n    dotted: {\n      true: {\n        root: {\n          _before: {\n            content: '\"\"',\n            width: '6px',\n            height: '6px',\n            borderRadius: '50%',\n          },\n        },\n      },\n    },\n  },\n  defaultVariants: {\n    variant: 'grey',\n  },\n  compoundVariants: [\n    {\n      variant: 'green',\n      dotted: true,\n      css: {\n        root: {\n          _before: {\n            bg: 'etc.active.20',\n          },\n        },\n      },\n    },\n    {\n      variant: 'grey',\n      dotted: true,\n      css: {\n        root: {\n          _before: {\n            bg: '#6C778B',\n          },\n        },\n      },\n    },\n    {\n      variant: 'yellow',\n      dotted: true,\n      css: {\n        root: {\n          _before: {\n            bg: '#E87E00',\n          },\n        },\n      },\n    },\n    {\n      variant: 'red',\n      dotted: true,\n      css: {\n        root: {\n          _before: {\n            bg: 'etc.error.30',\n          },\n        },\n      },\n    },\n  ],\n});\n"],"names":["slotClass","className","slot","sva","config","slots","getSlotRecipes","slotCva","cva","defaultVariants","svaFn","props","result","cvaFn","cx","raw","variants","variantKeys","splitVariantProps","splitProps","getVariantProps","compact","variantMap","key","value","memo","Button","children","jsx","css","Badge","forwardRef","badgeProps","ref","label","variant","dotted","classes","badgeSlot"],"mappings":"8GAIMA,EAAY,CAACC,EAAWC,IAASD,EAAY,KAAOC,EAEnD,SAASC,EAAIC,EAAQ,CAC1B,MAAMC,EAAQ,OAAO,QAAQC,EAAAA,eAAeF,CAAM,CAAC,EAAE,IAAI,CAAC,CAACF,EAAMK,CAAO,IAAM,CAACL,EAAMM,EAAG,IAACD,CAAO,CAAC,CAAC,EAC5FE,EAAkBL,EAAO,iBAAmB,CAAE,EAEpD,SAASM,EAAMC,EAAO,CACpB,MAAMC,EAASP,EAAM,IAAI,CAAC,CAACH,EAAMW,CAAK,IAAM,CAACX,EAAMY,EAAE,GAACD,EAAMF,CAAK,EAAGP,EAAO,WAAaJ,EAAUI,EAAO,UAAWF,CAAI,CAAC,CAAC,CAAC,EAC3H,OAAO,OAAO,YAAYU,CAAM,CACjC,CAED,SAASG,EAAIJ,EAAO,CAClB,MAAMC,EAASP,EAAM,IAAI,CAAC,CAACH,EAAMW,CAAK,IAAM,CAACX,EAAMW,EAAM,IAAIF,CAAK,CAAC,CAAC,EACpE,OAAO,OAAO,YAAYC,CAAM,CACjC,CAED,MAAMI,EAAWZ,EAAO,UAAY,GAC9Ba,EAAc,OAAO,KAAKD,CAAQ,EAExC,SAASE,EAAkBP,EAAO,CAChC,OAAOQ,EAAU,WAACR,EAAOM,CAAW,CACrC,CACD,MAAMG,EAAmBJ,IAAc,CAAE,GAAIP,GAAmB,CAAE,EAAG,GAAGY,EAAAA,QAAQL,CAAQ,IAElFM,EAAa,OAAO,YACxB,OAAO,QAAQN,CAAQ,EAAE,IAAI,CAAC,CAACO,EAAKC,CAAK,IAAM,CAACD,EAAK,OAAO,KAAKC,CAAK,CAAC,CAAC,CAC5E,EAEE,OAAO,OAAO,OAAOC,EAAI,KAACf,CAAK,EAAG,CAChC,QAAS,GACT,IAAAK,EACA,WAAAO,EACA,YAAAL,EACA,kBAAAC,EACA,gBAAAE,CACJ,CAAG,CACH,CCjCO,MAAMM,EAAS,CAAC,CAAE,SAAAC,KAErBC,EAAA,IAAC,SAAA,CACC,UAAWC,EAAAA,IAAI,CACb,MAAO,YACP,GAAI,YACJ,UAAW,IAAA,CACZ,EAEA,SAAAF,CAAA,CAAA,ECFMG,EAAQC,EAAAA,WAAwC,SAAeC,EAAYC,EAAK,CAC3F,KAAM,CAAE,UAAAhC,EAAW,MAAAiC,EAAO,QAAAC,EAAS,OAAAC,EAAQ,GAAGzB,CAAU,EAAAqB,EAClDK,EAAUC,EAAU,CAAE,QAAAH,EAAS,OAAAC,CAAQ,CAAA,EAC7C,aACG,OAAK,CAAA,IAAAH,EAAW,GAAGtB,EAAO,UAAWG,EAAG,GAAAuB,EAAQ,KAAMpC,CAAS,EAC9D,SAAC2B,EAAA,IAAA,OAAA,CAAK,UAAWS,EAAQ,KAAO,WAAM,CACxC,CAAA,CAEJ,CAAC,EAEDP,EAAM,YAAc,QAEpB,MAAMQ,EAAYnC,EAAI,CACpB,MAAO,CAAC,OAAQ,MAAM,EACtB,KAAM,CACJ,KAAM,CACJ,MAAO,cACP,QAAS,cACT,IAAK,MACL,eAAgB,SAChB,WAAY,SACZ,OAAQ,OACR,QAAS,UACT,aAAc,MAChB,EACA,KAAM,CACJ,UAAW,IACb,CACF,EACA,SAAU,CACR,QAAS,CACP,MAAO,CACL,KAAM,CAAE,GAAI,eAAgB,EAC5B,KAAM,CAAE,MAAO,eAAgB,CACjC,EACA,KAAM,CACJ,KAAM,CAAE,GAAI,SAAU,EACtB,KAAM,CAAE,MAAO,SAAU,CAC3B,EACA,OAAQ,CACN,KAAM,CAAE,GAAI,SAAU,EACtB,KAAM,CAAE,MAAO,SAAU,CAC3B,EACA,IAAK,CACH,KAAM,CAAE,GAAI,cAAe,EAC3B,KAAM,CAAE,MAAO,cAAe,CAChC,CACF,EACA,OAAQ,CACN,KAAM,CACJ,KAAM,CACJ,QAAS,CACP,QAAS,KACT,MAAO,MACP,OAAQ,MACR,aAAc,KAChB,CACF,CACF,CACF,CACF,EACA,gBAAiB,CACf,QAAS,MACX,EACA,iBAAkB,CAChB,CACE,QAAS,QACT,OAAQ,GACR,IAAK,CACH,KAAM,CACJ,QAAS,CACP,GAAI,eACN,CACF,CACF,CACF,EACA,CACE,QAAS,OACT,OAAQ,GACR,IAAK,CACH,KAAM,CACJ,QAAS,CACP,GAAI,SACN,CACF,CACF,CACF,EACA,CACE,QAAS,SACT,OAAQ,GACR,IAAK,CACH,KAAM,CACJ,QAAS,CACP,GAAI,SACN,CACF,CACF,CACF,EACA,CACE,QAAS,MACT,OAAQ,GACR,IAAK,CACH,KAAM,CACJ,QAAS,CACP,GAAI,cACN,CACF,CACF,CACF,CACF,CACF,CAAC"}